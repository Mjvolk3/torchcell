from _typeshed import Incomplete
from intermine.pathfeatures import PATH_PATTERN as PATH_PATTERN, PathFeature as PathFeature
from intermine.util import ReadableException as ReadableException

class Constraint(PathFeature):
    child_type: str

class LogicNode:
    def __add__(self, other): ...
    def __and__(self, other): ...
    def __or__(self, other): ...

class LogicGroup(LogicNode):
    LEGAL_OPS: Incomplete
    parent: Incomplete
    left: Incomplete
    right: Incomplete
    op: Incomplete
    def __init__(self, left, op, right, parent: Incomplete | None = ...) -> None: ...
    def get_codes(self): ...

class LogicParseError(ReadableException): ...
class EmptyLogicError(ValueError): ...

class LogicParser:
    def __init__(self, query) -> None: ...
    def get_constraint(self, code): ...
    def get_priority(self, op): ...
    ops: Incomplete
    def parse(self, logic_str): ...
    def check_syntax(self, infix_tokens) -> None: ...
    def infix_to_postfix(self, infix_tokens): ...
    def postfix_to_tree(self, postfix_tokens): ...

class CodedConstraint(Constraint, LogicNode):
    OPS: Incomplete
    op: Incomplete
    code: Incomplete
    def __init__(self, path, op, code: str = ...) -> None: ...
    def get_codes(self): ...
    def to_string(self): ...
    def to_dict(self): ...

class UnaryConstraint(CodedConstraint):
    OPS: Incomplete

class BinaryConstraint(CodedConstraint):
    OPS: Incomplete
    value: Incomplete
    def __init__(self, path, op, value, code: str = ...) -> None: ...
    def to_string(self): ...
    def to_dict(self): ...

class ListConstraint(CodedConstraint):
    OPS: Incomplete
    list_name: Incomplete
    def __init__(self, path, op, list_name, code: str = ...) -> None: ...
    def to_string(self): ...
    def to_dict(self): ...

class LoopConstraint(CodedConstraint):
    OPS: Incomplete
    SERIALISED_OPS: Incomplete
    loopPath: Incomplete
    def __init__(self, path, op, loopPath, code: str = ...) -> None: ...
    def to_string(self): ...
    def to_dict(self): ...

class TernaryConstraint(BinaryConstraint):
    OPS: Incomplete
    extra_value: Incomplete
    def __init__(self, path, op, value, extra_value: Incomplete | None = ..., code: str = ...) -> None: ...
    def to_string(self): ...
    def to_dict(self): ...

class MultiConstraint(CodedConstraint):
    OPS: Incomplete
    values: Incomplete
    def __init__(self, path, op, values, code: str = ...) -> None: ...
    def to_string(self): ...
    def to_dict(self): ...

class RangeConstraint(MultiConstraint):
    OPS: Incomplete

class IsaConstraint(MultiConstraint):
    OPS: Incomplete

class SubClassConstraint(Constraint):
    subclass: Incomplete
    def __init__(self, path, subclass) -> None: ...
    def to_string(self): ...
    def to_dict(self): ...

class TemplateConstraint:
    REQUIRED: str
    OPTIONAL_ON: str
    OPTIONAL_OFF: str
    editable: Incomplete
    optional: bool
    switched_on: bool
    def __init__(self, editable: bool = ..., optional: str = ...) -> None: ...
    @property
    def required(self): ...
    @property
    def switched_off(self): ...
    def get_switchable_status(self): ...
    def switch_on(self) -> None: ...
    def switch_off(self) -> None: ...
    def to_string(self): ...
    def separate_arg_sets(self, args): ...

class TemplateUnaryConstraint(UnaryConstraint, TemplateConstraint):
    def __init__(self, *a, **d) -> None: ...
    def to_string(self): ...

class TemplateBinaryConstraint(BinaryConstraint, TemplateConstraint):
    def __init__(self, *a, **d) -> None: ...
    def to_string(self): ...

class TemplateListConstraint(ListConstraint, TemplateConstraint):
    def __init__(self, *a, **d) -> None: ...
    def to_string(self): ...

class TemplateLoopConstraint(LoopConstraint, TemplateConstraint):
    def __init__(self, *a, **d) -> None: ...
    def to_string(self): ...

class TemplateTernaryConstraint(TernaryConstraint, TemplateConstraint):
    def __init__(self, *a, **d) -> None: ...
    def to_string(self): ...

class TemplateMultiConstraint(MultiConstraint, TemplateConstraint):
    def __init__(self, *a, **d) -> None: ...
    def to_string(self): ...

class TemplateRangeConstraint(RangeConstraint, TemplateConstraint):
    def __init__(self, *a, **d) -> None: ...
    def to_string(self): ...

class TemplateIsaConstraint(IsaConstraint, TemplateConstraint):
    def __init__(self, *a, **d) -> None: ...
    def to_string(self): ...

class TemplateSubClassConstraint(SubClassConstraint, TemplateConstraint):
    def __init__(self, *a, **d) -> None: ...
    def to_string(self): ...

class ConstraintFactory:
    CONSTRAINT_CLASSES: Incomplete
    reference_ops: Incomplete
    def __init__(self) -> None: ...
    def get_next_code(self): ...
    def make_constraint(self, *args, **kwargs): ...

class TemplateConstraintFactory(ConstraintFactory):
    CONSTRAINT_CLASSES: Incomplete
