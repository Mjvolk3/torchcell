program: experiments/smf-dmf-tmf-001/deep_set.py
project: torchcell_smf-dmf-tmf-001
method: grid
metric:
  goal: minimize
  name: val/loss

parameters:
  cell_dataset:
    parameters:
      graphs:
        values: [null]
      node_embeddings:
        values: [
            # one_hot_gene, # Y
            # codon_frequency, # y
            # fudt_downstream, # y
            # fudt_upstream, # y
            # nt_window_5979, y
            # nt_window_5979_max, y
            # nt_window_three_prime_300, y
            # nt_window_five_prime_1003, y
            # prot_T5_all, # y
            # prot_T5_no_dubious, # y
            # esm2_t33_650M_UR50D_all, # recompute
            # esm2_t33_650M_UR50D_no_dubious, # recompute
            normalized_chr_2_mean_pathways_4,
            normalized_chr_2_sum_pathways_4,
          ]
      max_size:
        values: [1e2]
  data_module:
    parameters:
      batch_size:
        values: [8]
      num_workers:
        values: [10]
      pin_memory:
        values: [true]
  trainer:
    parameters:
      max_epochs:
        values: [1]
      strategy:
        values: [auto]
  models:
    parameters:
      graph:
        parameters:
          hidden_channels:
            values: [128]
          out_channels:
            values: [32]
          num_node_layers:
            values: [2]
          num_set_layers:
            values: [2]
          norm:
            values: [batch]
          activation:
            values: [relu]
          skip_node:
            values: [true]
          skip_set:
            values: [true]
      pred_head:
        parameters:
          layer_dims:
            values: [[1]]
  regression_task:
    parameters:
      target:
        values: [fitness]
      boxplot_every_n_epochs:
        values: [5]
      learning_rate:
        values: [1e-3]
      weight_decay:
        values: [1e-5]
      loss:
        values: [mse]
      clip_grad_norm:
        values: [true]
      clip_grad_norm_max_norm:
        values: [1]
command:
  - ${env}
  - python
  - ${program}
