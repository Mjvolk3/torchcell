from _typeshed import Incomplete
from intermine.util import ReadableException as ReadableException, openAnything as openAnything

__organization__: str
__contact__: str

class Field:
    name: Incomplete
    type_name: Incomplete
    type_class: Incomplete
    declared_in: Incomplete
    def __init__(self, name, type_name, class_origin) -> None: ...
    @property
    def fieldtype(self) -> None: ...

class Attribute(Field):
    @property
    def fieldtype(self): ...

class Reference(Field):
    reverse_reference_name: Incomplete
    reverse_reference: Incomplete
    def __init__(self, name, type_name, class_origin, reverse_ref: Incomplete | None = ...) -> None: ...
    @property
    def fieldtype(self): ...

class Collection(Reference):
    @property
    def fieldtype(self): ...

class Class:
    name: Incomplete
    parents: Incomplete
    model: Incomplete
    parent_classes: Incomplete
    is_interface: Incomplete
    field_dict: Incomplete
    has_id: Incomplete
    def __init__(self, name, parents, model, interface: bool = ...) -> None: ...
    @property
    def fields(self): ...
    def __iter__(self): ...
    def __contains__(self, item) -> bool: ...
    @property
    def attributes(self): ...
    @property
    def references(self): ...
    @property
    def collections(self): ...
    def get_field(self, name): ...
    def isa(self, other): ...

class ComposedClass(Class):
    is_interface: bool
    parts: Incomplete
    model: Incomplete
    def __init__(self, parts, model) -> None: ...
    @property
    def parents(self): ...
    @property
    def name(self): ...
    @property
    def has_id(self): ...
    @property
    def field_dict(self): ...
    @property
    def parent_classes(self): ...

class Path:
    model: Incomplete
    subclasses: Incomplete
    parts: Incomplete
    def __init__(self, path, model, subclasses=...) -> None: ...
    def prefix(self): ...
    def append(self, *elements): ...
    @property
    def root(self): ...
    @property
    def end(self): ...
    def get_class(self): ...
    end_class: Incomplete
    def is_reference(self): ...
    def is_class(self): ...
    def is_attribute(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class ConstraintTree:
    op: Incomplete
    left: Incomplete
    right: Incomplete
    def __init__(self, op, left, right) -> None: ...
    def __and__(self, other): ...
    def __or__(self, other): ...
    def __iter__(self): ...
    def as_logic(self, codes: Incomplete | None = ..., start: str = ...): ...

class ConstraintNode(ConstraintTree):
    vargs: Incomplete
    kwargs: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def as_logic(self, codes: Incomplete | None = ..., start: str = ...): ...

class CodelessNode(ConstraintNode):
    def as_logic(self, code: Incomplete | None = ..., start: str = ...): ...

class Column:
    filter: Incomplete
    def __init__(self, path, model, subclasses=..., query: Incomplete | None = ..., parent: Incomplete | None = ...) -> None: ...
    def select(self, *cols): ...
    def where(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __getattr__(self, name): ...
    def __mod__(self, other): ...
    def __rshift__(self, other): ...
    __lshift__ = __rshift__
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __xor__(self, other): ...
    def in_(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class Model:
    NUMERIC_TYPES: Incomplete
    LOG: Incomplete
    source: Incomplete
    service: Incomplete
    classes: Incomplete
    table: Incomplete
    def __init__(self, source, service: Incomplete | None = ...) -> None: ...
    name: Incomplete
    package_name: Incomplete
    def parse_model(self, source): ...
    def vivify(self) -> None: ...
    def to_ancestry(self, cd): ...
    def to_classes(self, classnames): ...
    def column(self, path, *rest): ...
    def __getattr__(self, name): ...
    def get_class(self, name): ...
    def make_path(self, path, subclasses=...): ...
    def validate_path(self, path_string, subclasses=...): ...
    def parse_path_string(self, path_string, subclasses=...): ...

class ModelError(ReadableException): ...
class PathParseError(ModelError): ...

class ModelParseError(ModelError):
    source: Incomplete
    def __init__(self, message, source, cause: Incomplete | None = ...) -> None: ...
