{
    "folders": [
        {
            "name": "torchcell",
            "path": "."
        },
        {
            "name": "/scratch/projects/torchcell",
            "path": "/scratch/projects/torchcell"
        },
    ],
    "settings": {
        "dendron.rootDir": ".",
        "files.autoSave": "onFocusChange",
        "pasteImage.path": "${currentFileDir}/assets/images",
        "pasteImage.prefix": "./",
        "markdown-preview-enhanced.enableWikiLinkSyntax": true,
        "markdown-preview-enhanced.wikiLinkFileExtension": ".md",
        "editor.snippetSuggestions": "inline",
        "editor.suggest.snippetsPreventQuickSuggestions": false,
        "editor.suggest.showSnippets": true,
        "editor.tabCompletion": "on",
        "dendron.enableSelfContainedVaultWorkspace": true,
        "pasteImage.defaultName": "Y-MM-DD-HH-mm-ss",
        "workbench.colorCustomizations": {
            "titleBar.activeBackground": "#ff3001c7"
        },
        "markdownlint.config":{
            "MD007": { "indent": 2 },
            "MD008": false,
            "MD013": false,
            "MD014": false,
            "MD018": false,
            "MD025": false,
            "MD026": false,
            "MD033": false,
            "MD045": false,
            "MD050": false
        },
        "[markdown]": {
            "editor.codeActionsOnSave": {
                "source.fixAll.markdownlint": "explicit"
            }
        },
        "python.testing.pytestArgs": [
            "tests"
        ],
        "python.testing.unittestEnabled": false,
        "python.testing.pytestEnabled": true,
        "git.autoRepositoryDetection": false,
        "liveServer.settings.multiRootWorkspaceName": "TorchCell",
        "mypy.dmypyExecutable": "/Users/michaelvolk/opt/miniconda3/envs/torchcell/bin/dmypy",
        "mypy.enabled": true,
        "mypy.runUsingActiveInterpreter": false,
        "mypy.targets": [
            ".",
            "${workspaceFolder}/src/*"
        ],
        "git.ignoreLimitWarning": true,
        "esbonio.sphinx.confDir": ""
    },
    "extensions": {
        "recommendations": [
            "dendron.dendron",
            "dendron.dendron-paste-image",
            "dendron.dendron-markdown-shortcuts",
            "redhat.vscode-yaml"
        ],
        "unwantedRecommendations": [
            "dendron.dendron-markdown-links",
            "dendron.dendron-markdown-vault",
            "dendron.dendron-markdown-preview-enhanced",
            "shd101wyy.markdown-preview-enhanced",
            "kortina.vscode-markdown-notes",
            "mushan.vscode-paste-image"
        ]
    },
    "tasks": {
        "version": "2.0.0",
        "tasks": [
            // Publish
            {
                "label": "Paper: compile",
                "type": "shell",
                "command": "bash notes/assets/publish/scripts/compile_paper.sh",
                "problemMatcher": []
            },
            {
                "label": "Pandoc: quick-pdf",
                "type": "shell",
                "command": "cd ./notes && pandoc -F mermaid-filter -s ${file} -o ${fileDirname}/assets/pdf-output/${fileBasenameNoExtension}.pdf --pdf-engine=xelatex -V geometry:'top=2cm, bottom=1.5cm, left=2cm, right=2cm' --strip-comments  && cd ..",
                "problemMatcher": []
            },
            {
                "label": "Pandoc: quick-landscape-pdf",
                "type": "shell",
                "command": "cd ./notes && pandoc -F mermaid-filter -s ${file} -o ${fileDirname}/assets/pdf-output/${fileBasenameNoExtension}.pdf --pdf-engine=xelatex -V geometry:'top=0.1cm, bottom=0.1cm, left=0.1cm, right=0.1cm,landscape' --strip-comments   && cd ..",
                "problemMatcher": []
            },
            {
                "label": "Pandoc: bib-pdf",
                "type": "shell",
                "command": "cd ./notes && pandoc -F mermaid-filter -s ${file} -o ${fileDirname}/assets/pdf-output/${fileBasenameNoExtension}.pdf --pdf-engine=xelatex --citeproc --bibliography assets/publish/bib/bib.bib --metadata csl=assets/publish/bib/nature.csl -V geometry:'top=2cm, bottom=1.5cm, left=2cm, right=2cm' --strip-comments  && cd ..",
                "problemMatcher": []
            },
            {
                "label": "Pandoc: bib-tex-pdf",
                "type": "shell",
                "command": "./notes/assets/publish/scripts/bib_tex_pdf.sh ${file} ${fileDirname} ${fileBasenameNoExtension}",
                "problemMatcher": []
            },
            // Cluster
            {
                "label": "gilahyper: sacct",
                "type": "shell",
                "command": "sacct --starttime=$(date -d '${input:days} days ago' '+%Y-%m-%d') --format=JobID,JobName%50,State,Elapsed,Start,End,Nodelist",
                "problemMatcher": [],
                "inputs": [
                    {
                        "id": "days",
                        "description": "number of days",
                        "type": "promptString",
                        "default": "7"
                    }
                ]
            },
            // Notability
            {
                "label": "notability: sync",
                "type": "shell",
                "command": "bash notes/assets/scripts/notability_sync.sh",
                "problemMatcher": []
            },
            // Black
            {
                "label": "black: file",
                "type": "shell",
                "command": "black",
                "args": [
                    "${file}"
                ],
                "problemMatcher": [],
                "group": {
                    "kind": "build",
                    "isDefault": true
                }
            },
            // autoflake
            {
                "label": "autoflake: clean imports",
                "type": "shell",
                "command": "/Users/michaelvolk/opt/miniconda3/envs/torchcell/bin/autoflake",
                "args": [
                    "--remove-all-unused-imports",
                    "--remove-duplicate-keys",
                    "--in-place",
                    "${file}"
                ],
                "problemMatcher": [],
                "group": {
                    "kind": "build",
                    "isDefault": true
                }
            },
            // mypy
            {
                "label": "mypy: file",
                "type": "shell",
                "command": "bash mypy/mypy.sh ${file}",
                "problemMatcher": []
            },
            {
                "label": "mypy: workspace",
                "type": "shell",
                "command": "bash mypy/mypy.sh .",
                "problemMatcher": []
            },
            {
                "label": "dmypy: restart",
                "type": "shell",
                "command": "bash mypy/dmypy_restart.sh",
                "problemMatcher": []
            },
            //pyreverse
            {
                "label": "tc: pyreverse UML class diagram",
                "type": "shell",
                "command": "${workspaceFolder}/notes/assets/scripts/run_pyreverse.sh",
                "args": [
                    "${file}"
                ],
                "problemMatcher": [],
                "group": "build"
            },
            {
                "label": "pyreverse: UML class diagram",
                "type": "shell",
                "command": "/Users/michaelvolk/opt/miniconda3/envs/torchcell/bin/python",
                "args": [
                    "/Users/michaelvolk/opt/miniconda3/envs/torchcell/bin/pyreverse",
                    "-o",
                    "png",
                    "-p",
                    "uml_temp",
                    "${file}"
                ],
                "problemMatcher": [],
                "group": "build"
            },
            // isort
            {
                "label": "isort: file",
                "type": "shell",
                "command": "/Users/michaelvolk/opt/miniconda3/envs/torchcell/bin/isort ${file}",
                "problemMatcher": [],
                "presentation": {
                    "reveal": "always",
                    "panel": "shared",
                    "close": false
                }
            },
            //TC - workspace scripts notes/assets/scripts
            {
                "label": "tc: add frontmatter (py)",
                "type": "shell",
                "command": "/Users/michaelvolk/opt/miniconda3/envs/torchcell/bin/python",
                "args": [
                    "${workspaceFolder}/notes/assets/scripts/add_frontmatter.py",
                    "${file}"
                ],
                "problemMatcher": [],
                "presentation": {
                    "echo": true,
                    "reveal": "always",
                    "focus": false,
                    "panel": "shared",
                    "showReuseMessage": true,
                    "clear": false
                }
            },
            {
                "label": "tc: move file [note & test safe] (py)",
                "type": "shell",
                "command": "/Users/michaelvolk/opt/miniconda3/envs/torchcell/bin/python",
                "args": [
                    "${workspaceFolder}/notes/assets/scripts/python_move_dendron_pytest.py",
                    "${file}",
                    "${input:newFilePath}"
                ],
                "problemMatcher": [],
                "presentation": {
                    "reveal": "always"
                }
            },
            {
                "label": "tc: test file (py)",
                "type": "shell",
                "command": "/Users/michaelvolk/opt/miniconda3/envs/torchcell/bin/python",
                "args": [
                    "${workspaceFolder}/notes/assets/scripts/create_python_test_file.py",
                    "create",
                    "${file}"
                ],
                "problemMatcher": [],
                "presentation": {
                    "echo": true,
                    "reveal": "always",
                    "focus": false,
                    "panel": "shared",
                    "showReuseMessage": true,
                    "clear": false
                }
            },
            {
                "label": "tc: delete file [note & test safe] (py)",
                "type": "shell",
                "command": "/Users/michaelvolk/opt/miniconda3/envs/torchcell/bin/python",
                "args": [
                  "${workspaceFolder}/notes/assets/scripts/delete_file_and_open_related.py",
                  "${file}"
                ],
                "problemMatcher": [],
                "group": {
                  "kind": "build",
                  "isDefault": true
                },
                "presentation": {
                  "reveal": "always",
                  "focus": true,  // This will focus the terminal after the task is run
                  "panel": "shared"
                }
            },
            {
                "label": "tc: open related src file (dendron)",
                "type": "shell",
                "command": "/Users/michaelvolk/opt/miniconda3/envs/torchcell/bin/python",
                "args": [
                    "${workspaceFolder}/notes/assets/scripts/from_note_open_related_src.py",
                    "${file}"
                ],
                "problemMatcher": [],
                "presentation": {
                    "reveal": "always",
                    "panel": "shared"
                }
            },
            // pytest code coverage
            {
                "label": "pytest: coverage",
                "type": "shell",
                "command": "/Users/michaelvolk/opt/miniconda3/envs/torchcell/bin/python /Users/michaelvolk/opt/miniconda3/envs/torchcell/bin/pytest --cov=torchcell --cov-report html tests/ ",
                "problemMatcher": [],
            },
            // External 
            {
                "label": "Open External Terminal",
                "type": "shell",
                "command": "./notes/assets/scripts/open-external-terminal.sh",
                "problemMatcher": []
            },
            {
                "label": "tcdb: delta to m1",
                "type": "shell",
                "command": "osascript",
                "args": [
                    "-e",
                    "tell application \"Terminal\" to do script \"bash /Users/michaelvolk/Documents/projects/torchcell/delta_to_m1.sh ${input:databaseNameInput}\""
                ],
                "problemMatcher": [],
                "group": {
                    "kind": "build",
                    "isDefault": true
                }
            },
            {
                "label": "tcdb: build linux-arm",
                "type": "shell",
                "command": "osascript",
                "args": [
                    "-e",
                    "tell application \"Terminal\" to do script \"bash /Users/michaelvolk/Documents/projects/torchcell/database/build/build_linux-arm.sh\""
                ],
                "problemMatcher": [],
                "group": {
                    "kind": "build",
                    "isDefault": true
                }
            },
            {
                "label": "tcdb: build linux-arm fresh",
                "type": "shell",
                "command": "osascript",
                "args": [
                    "-e",
                    "tell application \"Terminal\" to do script \"bash /Users/michaelvolk/Documents/projects/torchcell/database/build/build-image-fresh_linux-arm.sh\""
                ],
                "problemMatcher": [],
                "group": {
                    "kind": "build",
                    "isDefault": true
                }
            },
            {
                "label": "tc: publish pypi",
                "type": "shell",
                "command": "source ${workspaceFolder}/notes/assets/scripts/tc_publish_pypi.sh",
                "problemMatcher": [],
            },
            // dendron
            {"label": "dendron: open random notes",
            "type": "shell",
            "command": "python notes/assets/scripts/open_random_notes.py -n ${input:openRandomNotes} -d ${workspaceFolder}/notes",
            "problemMatcher": [],
            },
        ],
        "inputs" : [
            {
                "id" : "openRandomNotes",
                "description": "number of random notes to open",
                "type": "pickString",
                "options": [
                    "1",
                    "2",
                    "4",
                    "8"
                    "16",
                ]
            },
            {
                "id" : "days",
                "description": "number of days",
                "type": "promptString",
                "default": "7"
            },
            {
                "id": "newFilePath",
                "type": "promptString",
                "description": "Enter the new file path:",
                "default": "torchcell/"
            },
            {
                "id" : "jobName",
                "description": "name of nano job",
                "type": "promptString",
            },
            {
                "id" : "nanoNode",
                "description": "nano Node",
                "type": "pickString",
                "options": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "6",
                    "8"

                ]
            },
            {
                "id": "numProcessors",
                "description": "number of cpus (nano2,nano3 (np=28); others (np=14) )",
                "type": "pickString",
                "options": [
                    "1",
                    "6",
                    "12",
                    "14",
                    "28",
                ]
            },
            {
                "id": "databaseNameInput",
                "type": "pickString",
                "description": "Choose the database directory:",
                "options": ["database1", "database2", "database3"],
                "default": "database1"
            }
        ]
    },
    "launch": {
        "version": "0.2.0",
        "configurations": [
            {
                "name": "Python: Workspace Folder",
                "type": "python",
                "request": "launch",
                "program": "${file}",
                "console": "integratedTerminal",
                "justMyCode": false,
                "cwd": "${workspaceFolder:torchcell}",
                "subProcess": true,
                "pythonArgs": ["-Xfrozen_modules=off"],
                "env": {"PYDEVD_DISABLE_FILE_VALIDATION": "1"},
            },
            {
                "name": "Python: yeast8",
                "type": "python",
                "request": "launch",
                "program": "${file}",
                "console": "integratedTerminal",
                "justMyCode": false,
                "cwd": "${workspaceFolder:yeast-GEM}",
                "subProcess": true,
                "python": "/Users/michaelvolk/opt/miniconda3/envs/yeast8/bin/python"
            },
            {
                "name": "Python: torchgeo",
                "type": "python",
                "request": "launch",
                "program": "${file}",
                "console": "integratedTerminal",
                "justMyCode": false,
                "cwd": "${workspaceFolder:torchgeo}",
                "subProcess": true,
                "python": "/Users/michaelvolk/opt/miniconda3/envs/torchgeo/bin/python"
            },
            {
                "type": "chrome",
                "name": "http://127.0.0.1:3000/docs/build/html/index.html",
                "request": "launch",
                "url": "http://127.0.0.1:3000/docs/build/html/index.html"
            },
            {
                "type": "chrome",
                "name": "http://127.0.0.1:3000/htmlcov/index.html",
                "request": "launch",
                "url": "http://127.0.0.1:3000/htmlcov/index.html"
            }
        ]
    },
}