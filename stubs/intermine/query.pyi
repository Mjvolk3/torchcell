from _typeshed import Incomplete
from intermine.model import Class as Class, Column as Column, ConstraintNode as ConstraintNode, Model as Model, Reference as Reference
from intermine.pathfeatures import Join as Join, PathDescription as PathDescription, SortOrder as SortOrder, SortOrderList as SortOrderList
from intermine.util import ReadableException as ReadableException, openAnything as openAnything

__organization__: str
__contact__: str
LOGIC_OPS: Incomplete
LOGIC_PRODUCT: Incomplete

class Query:
    SO_SPLIT_PATTERN: Incomplete
    LOGIC_SPLIT_PATTERN: Incomplete
    TRAILING_OP_PATTERN: Incomplete
    LEADING_OP_PATTERN: Incomplete
    ORPHANED_OP_PATTERN: Incomplete
    model: Incomplete
    root: Incomplete
    name: str
    description: str
    service: Incomplete
    prefetch_depth: Incomplete
    prefetch_id_only: Incomplete
    do_verification: Incomplete
    path_descriptions: Incomplete
    joins: Incomplete
    constraint_dict: Incomplete
    uncoded_constraints: Incomplete
    views: Incomplete
    constraint_factory: Incomplete
    c: Incomplete
    filter: Incomplete
    add_column: Incomplete
    add_columns: Incomplete
    add_views: Incomplete
    add_to_select: Incomplete
    order_by: Incomplete
    all: Incomplete
    size: Incomplete
    summarize: Incomplete
    def __init__(self, model, service: Incomplete | None = ..., validate: bool = ..., root: Incomplete | None = ...) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __sub__(self, other): ...
    def __xor__(self, other): ...
    def __and__(self, other): ...
    def __or__(self, other): ...
    def __add__(self, other): ...
    @classmethod
    def from_xml(cls, xml, *args, **kwargs): ...
    def verify(self) -> None: ...
    def select(self, *paths): ...
    def add_view(self, *paths): ...
    def prefix_path(self, path): ...
    def clear_view(self) -> None: ...
    def verify_views(self, views: Incomplete | None = ...) -> None: ...
    def add_constraint(self, *args, **kwargs): ...
    def where(self, *cons, **kwargs): ...
    def column(self, col): ...
    def verify_constraint_paths(self, cons: Incomplete | None = ...) -> None: ...
    @property
    def constraints(self): ...
    def get_constraint(self, code): ...
    def add_join(self, *args, **kwargs): ...
    def outerjoin(self, column): ...
    def verify_join_paths(self, joins: Incomplete | None = ...) -> None: ...
    def add_path_description(self, *args, **kwargs): ...
    def verify_pd_paths(self, pds: Incomplete | None = ...) -> None: ...
    @property
    def coded_constraints(self): ...
    def get_logic(self): ...
    def set_logic(self, value): ...
    def validate_logic(self, logic: Incomplete | None = ...) -> None: ...
    def get_default_sort_order(self): ...
    def get_sort_order(self): ...
    def add_sort_order(self, path, direction=...): ...
    def validate_sort_order(self, *so_elems) -> None: ...
    def get_subclass_dict(self): ...
    def results(self, row: str = ..., start: int = ..., size: Incomplete | None = ..., summary_path: Incomplete | None = ...): ...
    def dataframe(self, start: int = ..., size: Incomplete | None = ...): ...
    def rows(self, start: int = ..., size: Incomplete | None = ..., row: str = ...): ...
    def dataframe(self, start: int = ..., size: Incomplete | None = ...): ...
    def summarise(self, summary_path, **kwargs): ...
    def one(self, row: str = ...): ...
    def first(self, row: str = ..., start: int = ..., **kw): ...
    def get_results_list(self, *args, **kwargs): ...
    def get_row_list(self, start: int = ..., size: Incomplete | None = ...): ...
    def count(self): ...
    def get_list_upload_uri(self): ...
    def get_list_append_uri(self): ...
    def get_results_path(self): ...
    def children(self): ...
    def to_query(self): ...
    def make_list_constraint(self, path, op): ...
    def to_query_params(self): ...
    def to_Node(self): ...
    def to_xml(self): ...
    def to_formatted_xml(self): ...
    def clone(self): ...

class Template(Query):
    constraint_factory: Incomplete
    title: str
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def from_xml(cls, xml, *args, **kwargs): ...
    @property
    def editable_constraints(self): ...
    def to_query_params(self): ...
    def get_results_path(self): ...
    def get_adjusted_template(self, con_values): ...
    def results(self, row: str = ..., start: int = ..., size: Incomplete | None = ..., **con_values): ...
    def get_results_list(self, row: str = ..., start: int = ..., size: Incomplete | None = ..., **con_values): ...
    def get_row_list(self, start: int = ..., size: Incomplete | None = ..., **con_values): ...
    def rows(self, start: int = ..., size: Incomplete | None = ..., **con_values): ...
    def count(self, **con_values): ...

class QueryError(ReadableException): ...
class ConstraintError(QueryError): ...
class QueryParseError(QueryError): ...
class ResultError(ReadableException): ...
