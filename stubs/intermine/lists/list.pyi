from _typeshed import Incomplete
from intermine.errors import ServiceError as ServiceError
from intermine.model import ConstraintNode as ConstraintNode
from intermine.results import EnrichmentLine as EnrichmentLine, JSONIterator as JSONIterator

class List:
    LOG: Incomplete
    unmatched_identifiers: Incomplete
    def __init__(self, **args) -> None: ...
    @property
    def date_created(self): ...
    @property
    def tags(self): ...
    @property
    def description(self): ...
    @property
    def title(self): ...
    @property
    def status(self): ...
    @property
    def is_authorized(self): ...
    @property
    def list_type(self): ...
    def get_name(self): ...
    def set_name(self, new_name) -> None: ...
    def del_name(self) -> None: ...
    @property
    def size(self): ...
    @property
    def count(self): ...
    def __len__(self) -> int: ...
    name: Incomplete
    def delete(self) -> None: ...
    def to_query(self): ...
    def make_list_constraint(self, path, op): ...
    def display(self) -> None: ...
    def __iter__(self): ...
    def __getitem__(self, index): ...
    def __and__(self, other): ...
    def __iand__(self, other): ...
    def __or__(self, other): ...
    def __add__(self, other): ...
    def __iadd__(self, other): ...
    def append(self, appendix): ...
    def calculate_enrichment(self, widget, background: Incomplete | None = ..., correction: str = ..., maxp: float = ..., filter: str = ...): ...
    def __xor__(self, other): ...
    def __ixor__(self, other): ...
    def __sub__(self, other): ...
    def __isub__(self, other): ...
    def add_tags(self, *tags) -> None: ...
    def remove_tags(self, *tags) -> None: ...
    def update_tags(self, *tags) -> None: ...
